diff --git a/compiler-rt/make/platform/clang_darwin.mk b/compiler-rt/make/platform/clang_darwin.mk
index f4f548e..c479c78 100644
--- a/compiler-rt/make/platform/clang_darwin.mk
+++ b/compiler-rt/make/platform/clang_darwin.mk
@@ -33,9 +33,12 @@ CheckArches = \
         else \
           printf 1>&2 \
            "warning: clang_darwin.mk: dropping arch '$$arch' from lib '$(2)'"; \
-          printf 1>&2 " (clang does not support it)\n"; \
+          printf 1>&2 " (clang does not support it, with SDK='$(3)')\n"; \
         fi; \
       done; \
+    else \
+      printf 1>&2 \
+           "warning: clang_darwin.mk: dropping arch '$(1)' from lib '$(2)' (No SDK)\n"; \
     fi; \
     echo $$result)
 
@@ -44,24 +47,61 @@ XCRun = \
     result=`xcrun -find $(1) 2> /dev/null`; \
     if [ "$$?" != "0" ]; then result=$(1); fi; \
     echo $$result)
+
 XCRunSdkPath = \
   $(shell \
     result=`xcrun --sdk $(1) --show-sdk-path 2> /dev/null`; \
     if [ "$$?" != "0" ]; then result=""; fi; \
     echo $$result)
-###
 
-CC       := $(call XCRun,clang)
-LD       := $(shell $(CC) -print-prog-name=ld)
-AR       := $(call XCRun,ar)
-RANLIB   := $(call XCRun,ranlib)
-STRIP    := $(call XCRun,strip)
-LIPO     := $(call XCRun,lipo)
-DSYMUTIL := $(call XCRun,dsymutil)
+XCbuildSdkPath = \
+  $(shell \
+    result=`xcodebuild -version -sdk $(1)  2> /dev/null | grep ^Path | sed s/^Path:\ // `; \
+    echo $$result)
 
-OSX_SDK := $(call XCRunSdkPath,macosx)
-IOS_SDK := $(call XCRunSdkPath,iphoneos)
-IOSSIM_SDK := $(call XCRunSdkPath,iphonesimulator)
+###
+
+ifeq (Darwin,$(shell uname -s))
+  major = $(shell sw_vers | grep 'ProductVersion:' | grep -o '[0-9]*\.[0-9]*\.[0-9]*' | cut -d . -f2)
+
+#  CC       := $(call XCRun,clang)
+#  CXX      := $(call XCRun,clang++)
+#  LD       := $(shell $(CC) -print-prog-name=ld)
+#  AR       := $(call XCRun,ar)
+#  RANLIB   := $(call XCRun,ranlib)
+#  STRIP    := $(call XCRun,strip)
+#  LIPO     := $(call XCRun,lipo)
+#  DSYMUTIL := $(call XCRun,dsymutil)
+
+  ifeq (10,$(major))
+    p := $(shell printf 1>&2  "[10.$(major)] $(CC) $(OSX_SDK)\n")
+
+    OSX_SDK := $(call XCRunSdkPath,macosx)
+    IOS_SDK := $(call XCRunSdkPath,iphoneos)
+    IOSSIM_SDK := $(call XCRunSdkPath,iphonesimulator)
+
+  else
+    ifeq ($(OSX_SDK_ROOT),)
+      OSXV := macosx10.$(major)
+      SDKV := $(shell xcodebuild -version -sdk "$(OSXV)")
+      p0 := $(shell printf 1>&2  "[10.$(major)] $(OSXV) $(SDKV)\n")
+      SDKROOT := $(shell xcodebuild -version -sdk "$(OSXV)" | grep ^Path: | cut -d ' ' -f2 | xargs dirname)
+    else
+      SDKROOT := $(OSX_SDK_ROOT)
+    endif
+    ifeq (4,$(major))
+      OSX_SDK := $(SDKROOT)/MacOSX10.4u.sdk
+    else
+      OSX_SDK := $(SDKROOT)/MacOSX10.$(major).sdk
+    endif
+    p := $(shell printf 1>&2  "[10.$(major)] $(CC) $(OSX_SDK)\n")
+    IOS_SDK := $(call XCbuildSdkPath,iphoneos)
+    IOSSIM_SDK := $(call XCbuildSdkPath,iphonesimulator)
+  endif
+else
+  # cross case.
+  OSX_SDK := $(ProjSrcRoot)/SDKs/darwin
+endif
 
 Configs :=
 UniversalArchs :=
@@ -76,7 +116,7 @@ UniversalArchs.eprintf := $(call CheckArches,i386,eprintf,$(OSX_SDK))
 # libgcc_s.10.4.dylib. We only build x86 slices since clang doesn't really
 # support targeting PowerPC.
 Configs += 10.4
-UniversalArchs.10.4 := $(call CheckArches,i386 x86_64,10.4,$(OSX_SDK))
+UniversalArchs.10.4 := $(call CheckArches,ppc i386 x86_64,10.4,$(OSX_SDK))
 
 # Configuration for targeting iOS for a couple of functions that didn't
 # make it into libSystem.
@@ -87,11 +127,11 @@ UniversalArchs.ios += $(call CheckArches,armv7 arm64,ios,$(IOS_SDK))
 # Configuration for targeting OSX. These functions may not be in libSystem
 # so we should provide our own.
 Configs += osx
-UniversalArchs.osx := $(call CheckArches,i386 x86_64 x86_64h,osx,$(OSX_SDK))
+UniversalArchs.osx := $(call CheckArches,i386 ppc x86_64 x86_64h,osx,$(OSX_SDK))
 
 # Configuration for use with kernel/kexts.
 Configs += cc_kext
-UniversalArchs.cc_kext := $(call CheckArches,i386 x86_64 x86_64h,cc_kext,$(OSX_SDK))
+UniversalArchs.cc_kext := $(call CheckArches,i386 ppc x86_64 x86_64h,cc_kext,$(OSX_SDK))
 UniversalArchs.cc_kext += $(call CheckArches,armv7 arm64,cc_kext,$(IOS_SDK))
 
 # Configuration for use with kernel/kexts for iOS 5.0 and earlier (which used 
@@ -103,20 +143,35 @@ UniversalArchs.cc_kext_ios5 += $(call CheckArches,armv7,cc_kext_ios5,$(IOS_SDK))
 
 # Configurations which define the profiling support functions.
 Configs += profile_osx
-UniversalArchs.profile_osx := $(call CheckArches,i386 x86_64 x86_64h,profile_osx,$(OSX_SDK))
+UniversalArchs.profile_osx := $(call CheckArches,i386 ppc x86_64 x86_64h,profile_osx,$(OSX_SDK))
 Configs += profile_ios
 UniversalArchs.profile_ios := $(call CheckArches,i386 x86_64,profile_ios,$(IOSSIM_SDK))
 UniversalArchs.profile_ios += $(call CheckArches,armv7 arm64,profile_ios,$(IOS_SDK))
 
+ifeq ($(ENABLE_ASAN),1)
 # Configurations which define the ASAN support functions.
 Configs += asan_osx_dynamic
-UniversalArchs.asan_osx_dynamic := $(call CheckArches,i386 x86_64 x86_64h,asan_osx_dynamic,$(OSX_SDK))
+UniversalArchs.asan_osx_dynamic := $(call CheckArches,i386 ppc x86_64 x86_64h,asan_osx_dynamic,$(OSX_SDK))
 
+ifeq ($(ENABLE_105),1)
+Configs += asan_osx105_dynamic
+UniversalArchs.asan_osx105_dynamic := $(call CheckArches,ppc i386 x86_64,asan_osx105_dynamic,$(OSX_SDK))
+endif
+
+ifneq ($(IOSSIM_SDK_PATH),)
 Configs += asan_iossim_dynamic
 UniversalArchs.asan_iossim_dynamic := $(call CheckArches,i386 x86_64,asan_iossim_dynamic,$(IOSSIM_SDK))
+endif
+endif
 
+ifeq ($(ENABLE_UBSAN),1)
 Configs += ubsan_osx
-UniversalArchs.ubsan_osx := $(call CheckArches,i386 x86_64 x86_64h,ubsan_osx,$(OSX_SDK))
+UniversalArchs.ubsan_osx := $(call CheckArches,i386 ppc x86_64 x86_64h,ubsan_osx,$(OSX_SDK))
+ifeq ($(ENABLE_105),1)
+Configs += ubsan_osx105
+UniversalArchs.ubsan_osx105 := $(call CheckArches,ppc i386 x86_64,ubsan_osx105,$(OSX_SDK))
+endif
+endif
 
 # Darwin 10.6 has a bug in cctools that makes it unable to use ranlib on our ARM
 # object files. If we are on that platform, strip out all ARM archs. We still
@@ -155,7 +210,7 @@ CFLAGS := -Wall -Werror -O3 -fomit-frame-pointer
 # never depend on the environmental overrides. We simply set them to minimum
 # supported deployment target -- nothing in the compiler-rt libraries should
 # actually depend on the deployment target.
-OSX_DEPLOYMENT_ARGS := -mmacosx-version-min=10.4
+OSX_DEPLOYMENT_ARGS := -mmacosx-version-min=10.5
 IOS_DEPLOYMENT_ARGS := -mios-version-min=1.0
 IOS6_DEPLOYMENT_ARGS := -mios-version-min=6.0
 IOSSIM_DEPLOYMENT_ARGS := -mios-simulator-version-min=1.0
@@ -166,15 +221,23 @@ IOS6_DEPLOYMENT_ARGS += -isysroot $(IOS_SDK)
 IOSSIM_DEPLOYMENT_ARGS += -isysroot $(IOSSIM_SDK)
 
 CFLAGS.eprintf		:= $(CFLAGS) $(OSX_DEPLOYMENT_ARGS)
-CFLAGS.10.4		:= $(CFLAGS) $(OSX_DEPLOYMENT_ARGS)
+CFLAGS.10.4		:= $(CFLAGS) -mmacosx-version-min=10.4
 
+# FIXME: We can't build ASAN with our stub SDK yet.
 CFLAGS.asan_osx_dynamic := \
-	$(CFLAGS) -mmacosx-version-min=10.7 \
+	$(CFLAGS) -mmacosx-version-min=10.6 \
 	-isysroot $(OSX_SDK) \
 	-fno-builtin \
 	-gline-tables-only \
 	-DMAC_INTERPOSE_FUNCTIONS=1
 
+CFLAGS.asan_osx105_dynamic := \
+	$(CFLAGS) -mmacosx-version-min=10.5 \
+	-fno-builtin \
+	-gline-tables-only \
+	-isysroot $(OSX_SDK) \
+	-DMAC_INTERPOSE_FUNCTIONS=1
+
 CFLAGS.asan_iossim_dynamic := \
 	$(CFLAGS) -mios-simulator-version-min=7.0 \
         -isysroot $(IOSSIM_SDK) \
@@ -186,12 +249,17 @@ CFLAGS.ubsan_osx := $(CFLAGS) -mmacosx-version-min=10.6 \
 	-isysroot $(OSX_SDK) \
 	-fno-builtin
 
+CFLAGS.ubsan_osx105 := $(CFLAGS) -mmacosx-version-min=10.5 \
+	-isysroot $(OSX_SDK) \
+        -fno-builtin
+
 CFLAGS.ios.i386		:= $(CFLAGS) $(IOSSIM_DEPLOYMENT_ARGS)
 CFLAGS.ios.x86_64	:= $(CFLAGS) $(IOSSIM_DEPLOYMENT_ARGS)
 CFLAGS.ios.armv7	:= $(CFLAGS) $(IOS_DEPLOYMENT_ARGS)
 CFLAGS.ios.armv7k	:= $(CFLAGS) $(IOS_DEPLOYMENT_ARGS)
 CFLAGS.ios.armv7s	:= $(CFLAGS) $(IOS_DEPLOYMENT_ARGS)
 CFLAGS.ios.arm64	:= $(CFLAGS) $(IOS6_DEPLOYMENT_ARGS)
+CFLAGS.osx.ppc		:= $(CFLAGS) $(OSX_DEPLOYMENT_ARGS)
 CFLAGS.osx.i386		:= $(CFLAGS) $(OSX_DEPLOYMENT_ARGS)
 CFLAGS.osx.x86_64	:= $(CFLAGS) $(OSX_DEPLOYMENT_ARGS)
 CFLAGS.osx.x86_64h	:= $(CFLAGS) $(OSX_DEPLOYMENT_ARGS)
@@ -219,6 +287,10 @@ CFLAGS.profile_ios.arm64  := $(CFLAGS) $(IOS6_DEPLOYMENT_ARGS)
 SHARED_LIBRARY.asan_osx_dynamic := 1
 LDFLAGS.asan_osx_dynamic := -lstdc++ -undefined dynamic_lookup -install_name @rpath/libclang_rt.asan_osx_dynamic.dylib
 
+SHARED_LIBRARY.asan_osx105_dynamic := 1
+LDFLAGS.asan_osx105_dynamic := -undefined dynamic_lookup
+LDFLAGS.asan_osx105_dynamic += -Wl,-no_compact_unwind -lstdc++ 
+
 # Configure the asan_iossim_dynamic library to be built shared.
 SHARED_LIBRARY.asan_iossim_dynamic := 1
 # configure+make uses Clang, so we're using isysroot instead of --sysroot
@@ -229,6 +301,7 @@ LDFLAGS.asan_iossim_dynamic := -undefined dynamic_lookup -install_name @rpath/li
 
 FUNCTIONS.eprintf := eprintf
 FUNCTIONS.10.4 := eprintf floatundidf floatundisf floatundixf
+FUNCTIONS.10.4.ppc := $(FUNCTIONS.10.4) restFP saveFP atomic8
 
 FUNCTIONS.ios	    := divmodsi4 udivmodsi4 mulosi4 mulodi4 muloti4
 # On x86, the divmod functions reference divsi.
@@ -238,6 +311,7 @@ FUNCTIONS.ios.x86_64  := $(FUNCTIONS.ios.i386)
 FUNCTIONS.ios.arm64   := mulsc3 muldc3 divsc3 divdc3
 
 FUNCTIONS.osx	:= mulosi4 mulodi4 muloti4
+FUNCTIONS.osx.ppc := $(FUNCTIONS.osx) restFP saveFP atomic8
 
 FUNCTIONS.profile_osx := GCDAProfiling InstrProfiling InstrProfilingBuffer \
                          InstrProfilingFile InstrProfilingPlatformDarwin \
@@ -249,6 +323,11 @@ FUNCTIONS.asan_osx_dynamic := $(AsanFunctions) $(AsanCXXFunctions) \
                               $(SanitizerCommonFunctions) \
 	                      $(AsanDynamicFunctions)
 
+FUNCTIONS.asan_osx105_dynamic := $(AsanFunctions) $(AsanCXXFunctions) \
+                              $(InterceptionFunctions) \
+                              $(SanitizerCommonFunctions) \
+	                      $(AsanDynamicFunctions)
+
 FUNCTIONS.asan_iossim_dynamic := $(AsanFunctions) $(AsanCXXFunctions) \
                                  $(InterceptionFunctions) \
                                  $(SanitizerCommonFunctions) \
@@ -257,6 +336,9 @@ FUNCTIONS.asan_iossim_dynamic := $(AsanFunctions) $(AsanCXXFunctions) \
 FUNCTIONS.ubsan_osx := $(UbsanFunctions) $(UbsanCXXFunctions) \
                        $(SanitizerCommonFunctions)
 
+FUNCTIONS.ubsan_osx105 := $(UbsanFunctions) $(UbsanCXXFunctions) \
+                       $(SanitizerCommonFunctions)
+
 CCKEXT_PROFILE_FUNCTIONS := \
 	InstrProfiling \
 	InstrProfilingBuffer \
